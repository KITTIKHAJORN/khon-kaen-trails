// bookingapi.js
// ‡∏£‡∏ß‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Booking.com ‡πÅ‡∏•‡∏∞ RapidAPI ‡∏≠‡∏∑‡πà‡∏ô‡πÜ

const BOOKING_RAPIDAPI_HOST = 'booking-com.p.rapidapi.com'
const BOOKING_RAPIDAPI_KEY = '2ed1b7b119msh21fe7e2cef81710p1743f8jsneb5527ebb396'

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com
export async function getHotelDetails(hotelId) {
  if (!hotelId) {
    throw new Error('Hotel ID is required')
  }

  console.log('üè® ‡πÑ‡∏°‡πà‡∏°‡∏µ API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°')
  
  // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ API endpoint ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  return null
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Places API
export async function searchHotelsFromPlaces(query, placeData = null) {
  // ‡πÉ‡∏ä‡πâ Google Places API ‡πÅ‡∏ó‡∏ô Booking.com API
  const { textSearch } = await import("/src/api/mapapi.js")
  
  if (!placeData?.geometry?.location) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')
  }
  
  const latitude = placeData.geometry.location.lat
  const longitude = placeData.geometry.location.lng
  const location = `${latitude},${longitude}`
  
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Google Places:', query)
  console.log('üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:', location)
  
  return textSearch({
    query: `${query}`,
    location: location,
    radius: 5000,
    language: 'th',
    region: 'th'
  })
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function findKhonKaenDestId() {
  // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢ endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  const possibleEndpoints = [
    `https://${BOOKING_RAPIDAPI_HOST}/v1/locations/search`,
    `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/locations`,
    `https://${BOOKING_RAPIDAPI_HOST}/locations/search`,
    `https://${BOOKING_RAPIDAPI_HOST}/hotels/locations`
  ]

  for (const url of possibleEndpoints) {
    try {
      const params = new URLSearchParams({
        locale: 'en-gb',
        name: 'Khon Kaen'
      })

      console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô...')
      console.log('API URL:', `${url}?${params}`)

      const response = await fetch(`${url}?${params}`, {
        method: 'GET',
        headers: {
          'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
          'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
        }
      })

      if (response.ok) {
        const data = await response.json()
        console.log('‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô:', data)
        
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if (data && Array.isArray(data)) {
          const khonKaen = data.find(location => 
            location.name && (
              location.name.toLowerCase().includes('khon kaen') ||
              location.name.toLowerCase().includes('‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô')
            )
          )
          
          if (khonKaen && khonKaen.dest_id) {
            console.log('‚úÖ ‡∏û‡∏ö dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô:', khonKaen.dest_id)
            return khonKaen.dest_id
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Thailand
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Thailand...')
        return await findThailandDestId()
      } else {
        console.log(`‚ùå Endpoint ${url} ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (${response.status})`)
      }
    } catch (error) {
      console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö endpoint ${url}:`, error.message)
    }
  }
  
  console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô')
  return '-2092174'
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
async function findThailandDestId() {
  const url = `https://${BOOKING_RAPIDAPI_HOST}/v1/locations/search`
  
  const params = new URLSearchParams({
    locale: 'en-gb',
    name: 'Thailand'
  })

  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢...')

  try {
    const response = await fetch(`${url}?${params}`, {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
        'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
      }
    })

    if (!response.ok) {
      throw new Error(`Location API error: ${response.status}`)
    }

    const data = await response.json()
    console.log('‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢:', data)
    
    if (data && Array.isArray(data)) {
      const thailand = data.find(location => 
        location.name && location.name.toLowerCase().includes('thailand')
      )
      
      if (thailand && thailand.dest_id) {
        console.log('‚úÖ ‡∏û‡∏ö dest_id ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢:', thailand.dest_id)
        return thailand.dest_id
      }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    return '-2092174'
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢:', error)
    return '-2092174'
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com API
export async function searchHotelsFromBooking(query, placeData = null) {
  const url = `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/search`
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô
  const destId = await findKhonKaenDestId()
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-in ‡πÅ‡∏•‡∏∞ check-out
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(tomorrow.getDate() + 1)
  
  const checkinDate = today.toISOString().split('T')[0]
  const checkoutDate = tomorrow.toISOString().split('T')[0]
  
  // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const searchQuery = query || (placeData ? placeData.name : 'hotel')
  
  const params = new URLSearchParams({
    dest_id: destId,
    dest_type: 'city',
    locale: 'en-gb',
    filter_by_currency: 'THB',
    order_by: 'popularity',
    checkin_date: checkinDate,
    checkout_date: checkoutDate,
    room_number: '1',
    adults_number: '1',
    children_number: '1',
    children_ages: '0,17',
    page_number: '0',
    include_adjacency: 'true',
    units: 'metric',
    search_text: searchQuery // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°
  })

  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com:', searchQuery)
  console.log('üìç ‡πÉ‡∏ä‡πâ dest_id ‡∏ó‡∏µ‡πà‡∏û‡∏ö:', destId)
  console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-in:', checkinDate)
  console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-out:', checkoutDate)
  console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠:', searchQuery)
  console.log('API URL:', `${url}?${params}`)

  try {
    const response = await fetch(`${url}?${params}`, {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
        'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Booking Search API Error Response:', errorText)
      throw new Error(`Booking Search API error: ${response.status} - ${response.statusText}`)
    }

    const data = await response.json()
    console.log('‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com:', data)
    return data
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°:', error)
    throw error
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
export async function searchHotelsByCoordinates(placeData) {
  if (!placeData?.geometry?.location) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà')
  }

  const url = `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/search`
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  const destId = await findKhonKaenDestId()
  
  // ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ dest_id
  const latitude = placeData.geometry.location.lat
  const longitude = placeData.geometry.location.lng
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-in ‡πÅ‡∏•‡∏∞ check-out
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(tomorrow.getDate() + 1)
  
  const checkinDate = today.toISOString().split('T')[0]
  const checkoutDate = tomorrow.toISOString().split('T')[0]
  
  const params = new URLSearchParams({
    dest_id: destId,
    dest_type: 'city',
    latitude: latitude.toString(),
    longitude: longitude.toString(),
    locale: 'en-gb',
    filter_by_currency: 'THB',
    order_by: 'distance', // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    checkin_date: checkinDate,
    checkout_date: checkoutDate,
    room_number: '1',
    adults_number: '1',
    children_number: '1',
    children_ages: '0,17',
    page_number: '0',
    include_adjacency: 'true',
    units: 'metric',
    search_text: placeData.name // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°
  })

  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î:', placeData.name)
  console.log('üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î:', latitude, longitude)
  console.log('üìç dest_id:', destId)
  console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-in:', checkinDate)
  console.log('üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-out:', checkoutDate)
  console.log('API URL:', `${url}?${params}`)

  try {
    const response = await fetch(`${url}?${params}`, {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
        'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Booking Search by Coordinates API Error Response:', errorText)
      throw new Error(`Booking Search by Coordinates API error: ${response.status} - ${response.statusText}`)
    }

    const data = await response.json()
    console.log('‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î:', data)
    return data
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î:', error)
    throw error
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com API
export async function getHotelDetailsFromBooking(hotelId) {
  if (!hotelId) {
    throw new Error('Hotel ID is required')
  }

  console.log('üè® ‡πÑ‡∏°‡πà‡∏°‡∏µ API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ID:', hotelId)
  
  // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ API endpoint ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  return null
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export function isHotelType(types) {
  if (!types || !Array.isArray(types)) return false
  
  const hotelTypes = ['hotel', 'lodging', 'accommodation', 'resort', 'hostel', 'guest_house']
  return types.some(type => hotelTypes.includes(type))
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Places ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Booking API
export function extractHotelInfoFromPlace(place) {
  // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á hotel_id ‡∏à‡∏≤‡∏Å place_id ‡∏´‡∏£‡∏∑‡∏≠ name
  // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£ mapping ‡∏´‡∏£‡∏∑‡∏≠ search API
  return {
    place_id: place.place_id,
    name: place.name,
    address: place.vicinity || place.formatted_address,
    rating: place.rating,
    types: place.types,
    geometry: place.geometry
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Places
export async function getBookingHotelsList(page = 0) {
  console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Places - ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}`)
  
  try {
    // ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ pagination
    const hotels = await getHotelsByDestId(page)
    
    console.log(`‚úÖ ‡∏û‡∏ö ${hotels.length} ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}`)
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Google Places ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏°‡∏µ delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit)
    const formattedHotels = []
    
    for (let i = 0; i < hotels.length; i++) {
      const hotel = hotels[i]
      let photos = []
      
      // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (‡∏ó‡∏∏‡∏Å‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ‡πÅ‡∏ï‡πà‡∏°‡∏µ delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit)
      if (hotel.hotel_id || hotel.id) {
        try {
          console.log(`üì∏ ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ${i + 1}/${hotels.length}:`, hotel.hotel_id || hotel.id)
          const photosData = await getHotelPhotos(hotel.hotel_id || hotel.id)
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          if (photosData) {
            if (Array.isArray(photosData)) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
              console.log('üì∏ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', photosData.length)
              photos = photosData.map(photo => {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ photo ‡πÄ‡∏õ‡πá‡∏ô object ‡∏´‡∏£‡∏∑‡∏≠ string
                if (typeof photo === 'object' && photo !== null) {
                  // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á URL
                  return photo.url || 
                         photo.photo_url || 
                         photo.src || 
                         photo.url_square60 || 
                         photo.url_medium || 
                         photo.url_large ||
                         photo.url_max_300 ||
                         photo.original ||
                         photo.medium ||
                         photo.large ||
                         photo.max_300 ||
                         photo.square60 ||
                         photo.max_1280 ||
                         photo.url_max_1280 ||
                         photo
                } else {
                  return photo
                }
              })
              console.log('üì∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', photos.slice(0, 3)) // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
            } else if (photosData.photos && Array.isArray(photosData.photos)) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property photos
              console.log('üì∏ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• photos property ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', photosData.photos.length)
              photos = photosData.photos.map(photo => {
                if (typeof photo === 'object' && photo !== null) {
                  return photo.url || photo.photo_url || photo.src || photo.url_square60 || photo.url_medium || photo.url_large || photo
                } else {
                  return photo
                }
              })
              console.log('üì∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', photos.slice(0, 3)) // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
            } else if (photosData.data && Array.isArray(photosData.data)) {
              // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property data
              console.log('üì∏ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• data property ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', photosData.data.length)
              photos = photosData.data.map(photo => {
                if (typeof photo === 'object' && photo !== null) {
                  return photo.url || photo.photo_url || photo.src || photo.url_square60 || photo.url_medium || photo.url_large || photo
                } else {
                  return photo
                }
              })
              console.log('üì∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', photos.slice(0, 3)) // ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
            }
          }
          
          // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit
          if (i < hotels.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1000))
          }
        } catch (error) {
          console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡πÑ‡∏î‡πâ:', hotel.hotel_id || hotel.id, error.message)
          // ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ rate limit
          if (error.message.includes('429')) {
            console.log('üö´ ‡∏û‡∏ö Rate Limit ‡∏´‡∏¢‡∏∏‡∏î‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û')
            break
          }
        }
      }
      
      formattedHotels.push({
        place_id: hotel.hotel_id || hotel.id || `booking_${Math.random().toString(36).substr(2, 9)}`,
        name: hotel.hotel_name || hotel.name || hotel.title || hotel.hotel_name_trans || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
        vicinity: hotel.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
        formatted_address: hotel.address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
        rating: hotel.review_score || hotel.rating || hotel.score || 0,
        price_level: null,
        types: ['lodging', 'hotel', 'accommodation'],
        photos: photos,
        geometry: hotel.latitude && hotel.longitude ? {
          location: {
            lat: parseFloat(hotel.latitude),
            lng: parseFloat(hotel.longitude)
          }
        } : null,
        opening_hours: {
          open_now: true
        },
        business_status: 'OPERATIONAL',
        booking_data: {
          hotel_id: hotel.hotel_id || hotel.id,
          review_score: hotel.review_score || hotel.rating || hotel.score,
          review_count: hotel.review_nr || hotel.review_count || hotel.reviews_count,
          price: hotel.price_breakdown?.gross_price || hotel.price || hotel.min_price,
          distance: hotel.distance || hotel.distance_km,
          url: hotel.url
        }
      })
    }
    
    return {
      results: formattedHotels,
      status: 'OK',
      total_results: 200, // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
      has_next_page: hotels.length >= 20
    }
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°:', error)
    throw error
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏≤‡∏° dest_id
async function getHotelsByDestId(page = 0) {
  // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢ endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  const possibleEndpoints = [
    `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/search`,
    `https://${BOOKING_RAPIDAPI_HOST}/hotels/search`,
    `https://${BOOKING_RAPIDAPI_HOST}/v1/search`,
    `https://${BOOKING_RAPIDAPI_HOST}/search`
  ]
  
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ dest_id ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
  const destId = await findKhonKaenDestId()
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-in ‡πÅ‡∏•‡∏∞ check-out
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(tomorrow.getDate() + 1)
  
  const checkinDate = today.toISOString().split('T')[0]
  const checkoutDate = tomorrow.toISOString().split('T')[0]

  console.log(`üìç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${page + 1} ‡πÉ‡∏ä‡πâ dest_id:`, destId)
  
  for (const url of possibleEndpoints) {
    try {
      console.log(`üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${page + 1} ‡∏à‡∏≤‡∏Å ${url}`)
        
      const params = new URLSearchParams({
        dest_id: destId,
        dest_type: 'city',
        locale: 'en-gb',
        filter_by_currency: 'THB',
        order_by: 'popularity',
        checkin_date: checkinDate,
        checkout_date: checkoutDate,
        room_number: '1',
        adults_number: '1',
        children_number: '1',
        children_ages: '0,17',
        page_number: page.toString(),
        include_adjacency: 'true',
        units: 'metric',
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        price_min: '0',
        price_max: '10000',
        stars: '1,2,3,4,5',
        accommodation_type: 'hotel,resort,hostel,guesthouse,apartment'
      })

      const response = await fetch(`${url}?${params}`, {
        method: 'GET',
        headers: {
          'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
          'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
        }
      })

      if (response.ok) {
        const data = await response.json()
        console.log(`üìÑ ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}:`, data)
        
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Google Places API
        let hotels = []
        if (data.result && Array.isArray(data.result)) {
          hotels = data.result
        } else if (data.data && Array.isArray(data.data)) {
          hotels = data.data
        } else if (data.results && Array.isArray(data.results)) {
          hotels = data.results
        } else if (data.hotels && Array.isArray(data.hotels)) {
          hotels = data.hotels
        } else if (Array.isArray(data)) {
          hotels = data
        }
        
        console.log(`‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}: ‡∏û‡∏ö ${hotels.length} ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°`)
        return hotels
      } else {
        console.log(`‚ùå Endpoint ${url} ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (${response.status})`)
      }
    } catch (error) {
      console.log(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö endpoint ${url}:`, error.message)
    }
  }
  
  // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å endpoint ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ß‡πà‡∏≤‡∏á
  console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ')
  return []
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
async function getHotelsByCoordinates() {
  const url = `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/search`
  
  // ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
  const khonKaenLat = 16.4395
  const khonKaenLng = 102.8296
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà check-in ‡πÅ‡∏•‡∏∞ check-out
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(tomorrow.getDate() + 1)
  
  const checkinDate = today.toISOString().split('T')[0]
  const checkoutDate = tomorrow.toISOString().split('T')[0]

  console.log('üìç ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î:', khonKaenLat, khonKaenLng)
  
  try {
    const allHotels = []
    const maxPages = 5 // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏´‡∏ô‡πâ‡∏≤
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
    for (let page = 0; page < maxPages; page++) {
      console.log(`üìÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}/${maxPages}`)
      
      const params = new URLSearchParams({
        latitude: khonKaenLat.toString(),
        longitude: khonKaenLng.toString(),
        locale: 'en-gb',
        filter_by_currency: 'THB',
        order_by: 'distance',
        checkin_date: checkinDate,
        checkout_date: checkoutDate,
        room_number: '1',
        adults_number: '1',
        children_number: '1',
        children_ages: '0,17',
        page_number: page.toString(),
        include_adjacency: 'true',
        units: 'metric',
        price_min: '0',
        price_max: '10000'
      })

      const response = await fetch(`${url}?${params}`, {
        method: 'GET',
        headers: {
          'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
          'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
        }
      })

      if (!response.ok) {
        if (response.status === 404) {
          console.log(`üìÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 - ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏° (404)`)
          break
        }
        console.log(`üìÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 - ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}: ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ${response.status}`)
        continue
      }

      const data = await response.json()
      
      let hotels = []
      if (data.result && Array.isArray(data.result)) {
        hotels = data.result
      } else if (data.data && Array.isArray(data.data)) {
        hotels = data.data
      } else if (data.results && Array.isArray(data.results)) {
        hotels = data.results
      } else if (data.hotels && Array.isArray(data.hotels)) {
        hotels = data.hotels
      } else if (Array.isArray(data)) {
        hotels = data
      }
      
      if (hotels.length === 0) {
        console.log(`üìÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 - ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°`)
        break
      }
      
      allHotels.push(...hotels)
      console.log(`üìÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 - ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}: ‡∏û‡∏ö ${hotels.length} ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allHotels.length})`)
      
      if (hotels.length < 20) {
        console.log(`üìÑ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 - ‡∏´‡∏ô‡πâ‡∏≤ ${page + 1}: ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 20 ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)`)
        break
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay
      if (page < maxPages - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000))
      }
    }
    
    console.log(`‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allHotels.length} ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°`)
    return allHotels
    
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° (‡∏û‡∏¥‡∏Å‡∏±‡∏î):', error)
    return []
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com API
export async function getHotelReviews(hotelId, limit = 10, pageNumber = 0) {
  if (!hotelId) {
    throw new Error('Hotel ID is required')
  }

  const url = `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/reviews`
  
  const params = new URLSearchParams({
    sort_type: 'SORT_MOST_RELEVANT',
    customer_type: 'solo_traveller,review_category_group_of_friends',
    locale: 'en-gb',
    language_filter: 'en-gb,de,fr',
    page_number: pageNumber.toString(),
    hotel_id: hotelId.toString()
  })

  console.log('üí¨ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ID:', hotelId)
  console.log('API URL:', `${url}?${params}`)

  try {
    const response = await fetch(`${url}?${params}`, {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
        'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
      }
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° - ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', JSON.stringify(data, null, 2))
      console.log('‚úÖ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö:', data)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (data && typeof data === 'object') {
        console.log('üîç Keys ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', Object.keys(data))
        if (data.reviews) {
          console.log('üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:', data.reviews.length)
          if (data.reviews.length > 0) {
            console.log('üìù ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏£‡∏Å:', data.reviews[0])
            console.log('üìù Keys ‡πÉ‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏£‡∏Å:', Object.keys(data.reviews[0]))
          }
        }
        if (data.data) {
          console.log('üîç Keys ‡πÉ‡∏ô data:', Object.keys(data.data))
        }
      }
      
      return data
    } else {
      const errorText = await response.text()
      console.error('Hotel Reviews API Error Response:', errorText)
      throw new Error(`Hotel Reviews API error: ${response.status} - ${response.statusText}`)
    }
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°:', error)
    throw error
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏à‡∏≤‡∏Å Booking.com API
export async function getHotelPhotos(hotelId) {
  if (!hotelId) {
    throw new Error('Hotel ID is required')
  }

  const url = `https://${BOOKING_RAPIDAPI_HOST}/v1/hotels/photos`
  
  const params = new URLSearchParams({
    hotel_id: hotelId.toString(),
    locale: 'en-gb'
  })

  console.log('üì∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏° ID:', hotelId)
  console.log('API URL:', `${url}?${params}`)

  try {
    const response = await fetch(`${url}?${params}`, {
      method: 'GET',
      headers: {
        'X-RapidAPI-Key': BOOKING_RAPIDAPI_KEY,
        'X-RapidAPI-Host': BOOKING_RAPIDAPI_HOST
      }
    })

    if (response.ok) {
      const data = await response.json()
      console.log('‚úÖ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°:', data)
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      if (Array.isArray(data)) {
        console.log('üì∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Array ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:', data.length)
        if (data.length > 0) {
          console.log('üì∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å:', data[0])
          console.log('üì∏ Keys ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å:', Object.keys(data[0]))
        }
      } else if (data && typeof data === 'object') {
        console.log('üîç Keys ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', Object.keys(data))
        if (data.photos) {
          console.log('üì∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', data.photos.length)
          if (data.photos.length > 0) {
            console.log('üì∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏£‡∏Å:', data.photos[0])
          }
        }
        if (data.data) {
          console.log('üîç Keys ‡πÉ‡∏ô data:', Object.keys(data.data))
        }
      }
      
      return data
    } else if (response.status === 429) {
      console.error('üö´ Rate Limit: 429 - API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ')
      throw new Error(`Rate Limit: ${response.status} - Too Many Requests`)
    } else {
      const errorText = await response.text()
      console.error('Hotel Photos API Error Response:', errorText)
      throw new Error(`Hotel Photos API error: ${response.status} - ${response.statusText}`)
    }
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°:', error)
    throw error
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
export async function testPhotosAPI() {
  const testHotelId = '1377073'
  console.log('üß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ hotel_id:', testHotelId)
  
  try {
    const result = await getHotelPhotos(testHotelId)
    console.log('üß™ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', result)
    return result
  } catch (error) {
    console.error('üß™ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:', error)
    return null
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places API (‡∏™‡∏≥‡∏£‡∏≠‡∏á)
export async function getPlaceReviews(placeId) {
  try {
    const { getPlaceDetails } = await import("/src/api/mapapi.js")
    
    const placeDetails = await getPlaceDetails(placeId)
    
    if (placeDetails.result?.reviews) {
      console.log('‚úÖ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places:', placeDetails.result.reviews)
      return placeDetails.result.reviews
    }
    
    return []
  } catch (error) {
    console.error('‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places:', error)
    return []
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Booking.com ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
export function formatBookingReviews(reviewsData) {
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß:', reviewsData)
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
  let reviews = []
  
  if (reviewsData?.data?.reviews && Array.isArray(reviewsData.data.reviews)) {
    reviews = reviewsData.data.reviews
    console.log('‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô reviewsData.data.reviews:', reviews.length)
  } else if (reviewsData?.reviews && Array.isArray(reviewsData.reviews)) {
    reviews = reviewsData.reviews
    console.log('‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô reviewsData.reviews:', reviews.length)
  } else if (Array.isArray(reviewsData)) {
    reviews = reviewsData
    console.log('‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô Array:', reviews.length)
  } else if (reviewsData?.data && Array.isArray(reviewsData.data)) {
    reviews = reviewsData.data
    console.log('‚úÖ ‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô reviewsData.data:', reviews.length)
  } else {
    console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á:', reviewsData)
    return []
  }

  return reviews.map(review => ({
    id: review.review_id || review.id || review.review_uuid || Math.random().toString(36).substr(2, 9),
    author_name: review.reviewer_name || review.author_name || review.name || '‡∏ú‡∏π‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
    author_photo: review.reviewer_photo || review.author_photo || review.photo || null,
    rating: review.review_score || review.rating || review.score || 0,
    text: review.review_text || review.text || review.comment || review.review_text_content || '',
    time: review.review_date || review.time || review.date || review.created_at || null,
    language: review.review_language || review.language || 'en',
    helpful_votes: review.helpful_count || review.helpful_votes || 0,
    source: 'booking.com',
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    country: review.reviewer_country || review.country || null,
    stay_date: review.stay_date || null,
    room_type: review.room_type || null
  }))
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
export function formatGoogleReviews(reviews) {
  if (!reviews || !Array.isArray(reviews)) {
    return []
  }

  return reviews.map(review => ({
    id: review.author_url || Math.random().toString(36).substr(2, 9),
    author_name: review.author_name || '‡∏ú‡∏π‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß',
    author_photo: review.profile_photo_url || null,
    rating: review.rating || 0,
    text: review.text || '',
    time: review.time || null,
    language: review.language || 'th',
    helpful_votes: 0,
    source: 'google_places'
  }))
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏° (Booking.com + Google Places)
export async function getCombinedReviews(hotelId, placeId = null) {
  const allReviews = []

  try {
    // ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Booking.com
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Booking.com...')
    const bookingReviews = await getHotelReviews(hotelId, 10, 0)
    const formattedBookingReviews = formatBookingReviews(bookingReviews)
    allReviews.push(...formattedBookingReviews)
    console.log(`‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Booking.com: ${formattedBookingReviews.length} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß`)
  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Booking.com:', error)
  }

  // ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ place_id)
  if (placeId) {
    try {
      console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places...')
      const googleReviews = await getPlaceReviews(placeId)
      const formattedGoogleReviews = formatGoogleReviews(googleReviews)
      allReviews.push(...formattedGoogleReviews)
      console.log(`‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places: ${formattedGoogleReviews.length} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß`)
    } catch (error) {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å Google Places:', error)
    }
  }

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const sortedReviews = allReviews.sort((a, b) => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
    if (b.rating !== a.rating) {
      return b.rating - a.rating
    }
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (b.time && a.time) {
      return new Date(b.time) - new Date(a.time)
    }
    return 0
  })

  console.log(`‚úÖ ‡∏£‡∏ß‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${sortedReviews.length} ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß`)
  return sortedReviews
}
// weatherapi.js
// Weather API integration using RapidAPI - Open Weather API

const RAPIDAPI_HOST = 'open-weather13.p.rapidapi.com'
const RAPIDAPI_KEY = '2ed1b7b119msh21fe7e2cef81710p1743f8jsneb5527ebb396'
const BASE_URL = 'https://open-weather13.p.rapidapi.com'

// Current Weather API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô)
export async function getCurrentWeather(params = {}) {
  const {
    lat = null, // ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
    lon = null, // ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
    lang = 'th' // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  } = params

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!lat || !lon) {
    throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î')
  }

  // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  const forecastData = await getForecastWeather({ lat, lon, lang })
  
  if (!forecastData || !forecastData.list || forecastData.list.length === 0) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®')
  }

  // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const currentData = {
    ...forecastData,
    current: forecastData.list[0],
    main: forecastData.list[0].main,
    weather: forecastData.list[0].weather,
    wind: forecastData.list[0].wind,
    dt: forecastData.list[0].dt
  }

  console.log('Current Weather Data (from forecast):', currentData)
  return currentData
}

// Forecast Weather API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 5 ‡∏ß‡∏±‡∏ô
export async function getForecastWeather(params = {}) {
  const {
    lat = null, // ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
    lon = null, // ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏)
    lang = 'th' // ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  } = params

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!lat || !lon) {
    throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î')
  }

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 6 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
  const preciseLat = parseFloat(lat).toFixed(6)
  const preciseLon = parseFloat(lon).toFixed(6)

  const queryParams = new URLSearchParams({
    latitude: preciseLat,
    longitude: preciseLon,
    lang: lang
  })

  const url = `${BASE_URL}/fivedaysforcast?${queryParams}`

  console.log('Forecast Weather API Request URL:', url)
  console.log('Forecast Weather API Request Params:', Object.fromEntries(queryParams))
  console.log('üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:', { lat: preciseLat, lon: preciseLon })

  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'x-rapidapi-host': RAPIDAPI_HOST,
        'x-rapidapi-key': RAPIDAPI_KEY
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Forecast Weather API Error Response:', errorText)
      throw new Error(`Forecast Weather API error: ${response.status} - ${response.statusText}`)
    }

    const data = await response.json()
    console.log('Forecast Weather API Response Data:', data)
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
    if (data && data.list && data.list.length > 0) {
      console.log('‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data.list.length, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      data.list.forEach((item, index) => {
        if (item.main && item.main.temp) {
          const originalTemp = item.main.temp
          console.log(`üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà ${index + 1}: ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏î‡∏¥‡∏ö ${originalTemp}`)
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏õ‡πá‡∏ô Kelvin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (item.main.temp > 200) {
            item.main.temp = item.main.temp - 273.15 // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Kelvin ‡πÄ‡∏õ‡πá‡∏ô Celsius
            console.log(`üå°Ô∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Kelvin: ${originalTemp}K ‚Üí ${item.main.temp.toFixed(1)}¬∞C`)
          }
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if (item.main.temp > 50 || item.main.temp < -20) {
            console.warn(`‚ö†Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ó‡∏µ‡πà ${index + 1}: ${item.main.temp}¬∞C`)
            console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
          }
          
          console.log(`üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà ${index + 1}: ${item.main.temp}¬∞C`)
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
        if (item.main && item.main.humidity) {
          if (item.main.humidity > 100 || item.main.humidity < 0) {
            console.warn(`‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ó‡∏µ‡πà ${index + 1}: ${item.main.humidity}%`)
            console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
          }
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
        if (item.main && item.main.pressure) {
          if (item.main.pressure < 900 || item.main.pressure > 1100) {
            console.warn(`‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏ó‡∏µ‡πà ${index + 1}: ${item.main.pressure} hPa`)
            console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
          }
        }
      })
    }
    
    return data
  } catch (error) {
    console.error('Forecast Weather API Error:', error)
    throw error
  }
}

// Air Pollution API - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
export async function getAirPollution(params = {}) {
  const {
    place = 'Khon Kaen,TH', // ‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô, ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    units = 'metric',
    lang = 'th',
    mode = 'json'
  } = params

  const queryParams = new URLSearchParams({
    place,
    units,
    lang,
    mode
  })

  const url = `${BASE_URL}/air-pollution?${queryParams}`

  console.log('Air Pollution API Request URL:', url)
  console.log('Air Pollution API Request Params:', Object.fromEntries(queryParams))

  try {
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'x-rapidapi-host': RAPIDAPI_HOST,
        'x-rapidapi-key': RAPIDAPI_KEY
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('Air Pollution API Error Response:', errorText)
      throw new Error(`Air Pollution API error: ${response.status} - ${response.statusText}`)
    }

    const data = await response.json()
    console.log('Air Pollution API Response Data:', data)
    return data
  } catch (error) {
    console.error('Air Pollution API Error:', error)
    throw error
  }
}

// ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô =====

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 500 ‡πÄ‡∏°‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
export function isWithin500Meters(lat1, lon1, lat2, lon2) {
  const R = 6371000; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£
  
  return distance <= 500; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 500 ‡πÄ‡∏°‡∏ï‡∏£
}

// ‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 500 ‡πÄ‡∏°‡∏ï‡∏£
export function findNearestWeatherPoint(targetLat, targetLon, weatherPoints) {
  let nearestPoint = null;
  let minDistance = Infinity;
  
  weatherPoints.forEach(point => {
    const distance = calculateDistance(targetLat, targetLon, point.lat, point.lon);
    if (distance < minDistance && distance <= 500) {
      minDistance = distance;
      nearestPoint = point;
    }
  });
  
  return nearestPoint;
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î
export function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371000; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
            Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function getKhonKaenCurrentWeather() {
  return getCurrentWeather({
    lat: 16.4419, // ‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
    lon: 102.8358, // ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏à‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
    lang: 'th'
  })
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
export async function getWeatherByCoordinates(lat, lon) {
  return getCurrentWeather({
    lat: lat,
    lon: lon,
    lang: 'th'
  })
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function getKhonKaenForecast() {
  return getForecastWeather({
    lat: 16.4419,
    lon: 102.8358,
    lang: 'th'
  })
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î
export async function getForecastByCoordinates(lat, lon) {
  return getForecastWeather({
    lat: lat,
    lon: lon,
    lang: 'th'
  })
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏≤‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function getKhonKaenAirPollution() {
  return getAirPollution({
    place: 'Khon Kaen,TH',
    units: 'metric',
    lang: 'th'
  })
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function getKhonKaenWeatherData() {
  try {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    const forecast = await getKhonKaenForecast()
    
    if (!forecast || !forecast.list || forecast.list.length === 0) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®')
    }

    // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const current = {
      ...forecast.list[0],
      main: forecast.list[0].main,
      weather: forecast.list[0].weather,
      wind: forecast.list[0].wind,
      dt: forecast.list[0].dt
    }

    return {
      current,
      forecast,
      coordinates: { lat: 16.4419, lon: 102.8358 },
      timestamp: new Date().toISOString()
    }
  } catch (error) {
    console.error('Error fetching complete weather data:', error)
    throw error
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function getWeatherDataByCoordinates(lat, lon) {
  try {
    console.log(`üìç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${lat}, ${lon}`);
    
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ API ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà endpoint ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    const forecast = await getForecastByCoordinates(lat, lon)
    
    if (!forecast || !forecast.list || forecast.list.length === 0) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®')
    }

    // ‡πÄ‡∏≠‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const current = {
      ...forecast.list[0],
      main: forecast.list[0].main,
      weather: forecast.list[0].weather,
      wind: forecast.list[0].wind,
      dt: forecast.list[0].dt
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
    if (current.main && current.main.temp) {
      console.log(`üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏î‡∏¥‡∏ö: ${current.main.temp}`);
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏õ‡πá‡∏ô Kelvin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (current.main.temp > 200) {
        current.main.temp = current.main.temp - 273.15; // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Kelvin ‡πÄ‡∏õ‡πá‡∏ô Celsius
        console.log(`üå°Ô∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Kelvin: ${current.main.temp + 273.15}K ‚Üí ${current.main.temp.toFixed(1)}¬∞C`);
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (current.main.temp > 50 || current.main.temp < -20) {
        console.warn('‚ö†Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•:', current.main.temp);
        console.log('‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      }
      
      console.log(`üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: ${current.main.temp}¬∞C`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UV Index
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UV Index:');
    console.log('  - current.uvi:', current.uvi);
    console.log('  - current.main.uvi:', current.main?.uvi);
    console.log('  - current.sys.uvi:', current.sys?.uvi);
    console.log('  - current.uv:', current.uv);
    
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UV Index ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà
    let uvIndex = null;
    if (current.uvi !== undefined && current.uvi !== null) {
      uvIndex = current.uvi;
      console.log(`‚òÄÔ∏è ‡∏û‡∏ö UV Index ‡πÉ‡∏ô current.uvi: ${uvIndex}`);
    } else if (current.main && current.main.uvi !== undefined && current.main.uvi !== null) {
      uvIndex = current.main.uvi;
      console.log(`‚òÄÔ∏è ‡∏û‡∏ö UV Index ‡πÉ‡∏ô current.main.uvi: ${uvIndex}`);
    } else if (current.sys && current.sys.uvi !== undefined && current.sys.uvi !== null) {
      uvIndex = current.sys.uvi;
      console.log(`‚òÄÔ∏è ‡∏û‡∏ö UV Index ‡πÉ‡∏ô current.sys.uvi: ${uvIndex}`);
    } else if (current.uv !== undefined && current.uv !== null) {
      uvIndex = current.uv;
      console.log(`‚òÄÔ∏è ‡∏û‡∏ö UV Index ‡πÉ‡∏ô current.uv: ${uvIndex}`);
    } else {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UV Index ‡πÉ‡∏ô API response');
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô current object
      console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô current object:', Object.keys(current));
      if (current.main) {
        console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô current.main:', Object.keys(current.main));
      }
    }
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UV Index
    if (uvIndex !== null) {
      current.uvi = uvIndex;
      console.log(`‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ UV Index: ${uvIndex}`);
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UV Index ‡πÑ‡∏î‡πâ');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    if (current.weather && current.weather[0]) {
      const weatherDesc = current.weather[0].description;
      console.log(`üå§Ô∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${weatherDesc}`);
    }

    return {
      current,
      forecast,
      coordinates: { lat, lon },
      timestamp: new Date().toISOString()
    }
  } catch (error) {
    console.error('Error fetching weather data by coordinates:', error)
    throw error
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô (‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö mapapi.js)
export async function getWeatherByPlace(placeData) {
  if (!placeData || !placeData.geometry || !placeData.geometry.location) {
    throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
  }
  
  const { lat, lng } = placeData.geometry.location
  console.log(`üè¢ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${placeData.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}`);
  console.log(`üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${lat}, ${lng}`);
  
  return getWeatherDataByCoordinates(lat, lng)
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ 500 ‡πÄ‡∏°‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
export async function getWeatherWithin500Meters(placeData, radiusMeters = 500) {
  if (!placeData || !placeData.geometry || !placeData.geometry.location) {
    throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
  }
  
  const { lat, lng } = placeData.geometry.location
  console.log(`üéØ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ ${radiusMeters} ‡πÄ‡∏°‡∏ï‡∏£‡∏à‡∏≤‡∏Å: ${placeData.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠'}`);
  console.log(`üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ${lat}, ${lng}`);
  
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
  const weatherData = await getWeatherDataByCoordinates(lat, lng)
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏±‡∏®‡∏°‡∏µ
  return {
    ...weatherData,
    placeInfo: {
      name: placeData.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
      address: placeData.vicinity || placeData.formatted_address || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
      radius: radiusMeters
    }
  }
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô
export async function getWeatherByPlaceName(placeName) {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö mapapi.js ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô
  // ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≤‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô
  throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ getWeatherByPlace() ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å mapapi.js')
}

// Helper function - ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
export function formatTemperature(temp, unit = '¬∞C') {
  if (temp === null || temp === undefined) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏õ‡πá‡∏ô Kelvin ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 200)
  let celsiusTemp = temp
  if (temp > 200) {
    celsiusTemp = temp - 273.15 // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Kelvin ‡πÄ‡∏õ‡πá‡∏ô Celsius
    console.log(`üå°Ô∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏à‡∏≤‡∏Å Kelvin: ${temp}K ‚Üí ${celsiusTemp.toFixed(1)}¬∞C`)
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (celsiusTemp > 50 || celsiusTemp < -20) {
    console.warn(`‚ö†Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•: ${celsiusTemp}¬∞C`)
    // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
    celsiusTemp = 25
  }
  
  return `${Math.round(celsiusTemp)}${unit}`
}

// Helper function - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
export function formatHumidity(humidity) {
  if (humidity === null || humidity === undefined) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  return `${humidity}%`
}

// Helper function - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°
export function formatWindSpeed(speed, unit = 'm/s') {
  if (speed === null || speed === undefined) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  return `${speed} ${unit}`
}

// Helper function - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
export function formatPressure(pressure, unit = 'hPa') {
  if (pressure === null || pressure === undefined) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  return `${pressure} ${unit}`
}

// Helper function - ‡πÅ‡∏õ‡∏•‡∏á UV Index
export function formatUVIndex(uv) {
  if (uv === null || uv === undefined || uv === '') {
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• UV Index');
    return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const uvValue = parseFloat(uv);
  if (isNaN(uvValue)) {
    console.log('‚ö†Ô∏è UV Index ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:', uv);
    return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'
  }
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ UV Index ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
  let level = ''
  let description = ''
  let color = ''
  
  if (uvValue <= 2) {
    level = '‡∏ï‡πà‡∏≥'
    description = '‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢'
    color = 'üü¢'
  } else if (uvValue <= 5) {
    level = '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
    description = '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢'
    color = 'üü°'
  } else if (uvValue <= 7) {
    level = '‡∏™‡∏π‡∏á'
    description = '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
    color = 'üü†'
  } else if (uvValue <= 10) {
    level = '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å'
    description = '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏™‡∏π‡∏á'
    color = 'üî¥'
  } else {
    level = '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢'
    description = '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏°‡∏≤‡∏Å'
    color = 'üü£'
  }
  
  const result = `${color} ${uvValue} (${level})`
  console.log(`‚òÄÔ∏è UV Index: ${result} - ${description}`);
  return result
}

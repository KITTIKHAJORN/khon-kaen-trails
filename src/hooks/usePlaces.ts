import { useState, useEffect, useCallback } from 'react';
import { 
  textSearch, 
  nearbySearch, 
  searchKhonKaenRestaurants,
  searchKhonKaenAttractions,
  searchKhonKaenHotels,
  searchKhonKaenUniversities,
  searchKhonKaenMalls,
  searchNearbyKhonKaen
} from '@/api/mapapi';

// Types for Places API response
export interface PlacePhoto {
  height: number;
  width: number;
  photo_reference: string;
}

export interface PlaceGeometry {
  location: {
    lat: number;
    lng: number;
  };
  viewport?: {
    northeast: { lat: number; lng: number };
    southwest: { lat: number; lng: number };
  };
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å API
  lat?: number;
  lng?: number;
}

export interface Place {
  place_id: string;
  name: string;
  formatted_address?: string;
  geometry: PlaceGeometry;
  rating?: number;
  user_ratings_total?: number;
  price_level?: number;
  types: string[];
  photos?: PlacePhoto[];
  opening_hours?: {
    open_now: boolean;
  };
  business_status?: string;
}

export interface PlacesResponse {
  results: Place[];
  status: string;
  next_page_token?: string;
}

// Hook for general places search
export const usePlacesSearch = () => {
  const [places, setPlaces] = useState<Place[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const searchPlaces = useCallback(async (params: any) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await textSearch(params);
      if (response.status === 'OK') {
        setPlaces(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    } finally {
      setLoading(false);
    }
  }, []);

  const searchNearby = useCallback(async (params: any) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await nearbySearch(params);
      if (response.status === 'OK') {
        setPlaces(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    places,
    loading,
    error,
    searchPlaces,
    searchNearby,
    clearPlaces: () => setPlaces([]),
    clearError: () => setError(null)
  };
};

// Hook for Khon Kaen specific searches
export const useKhonKaenPlaces = () => {
  const [restaurants, setRestaurants] = useState<Place[]>([]);
  const [attractions, setAttractions] = useState<Place[]>([]);
  const [hotels, setHotels] = useState<Place[]>([]);
  const [universities, setUniversities] = useState<Place[]>([]);
  const [malls, setMalls] = useState<Place[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fetchRestaurants = useCallback(async (query?: string, radius?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await searchKhonKaenRestaurants(query, radius);
      if (response.status === 'OK') {
        setRestaurants(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£');
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchAttractions = useCallback(async (query?: string, radius?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await searchKhonKaenAttractions(query, radius);
      if (response.status === 'OK') {
        setAttractions(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß');
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchHotels = useCallback(async (query?: string, radius?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await searchKhonKaenHotels(query, radius);
      if (response.status === 'OK') {
        setHotels(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å');
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchUniversities = useCallback(async (query?: string, radius?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await searchKhonKaenUniversities(query, radius);
      if (response.status === 'OK') {
        setUniversities(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢');
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchMalls = useCallback(async (query?: string, radius?: number) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await searchKhonKaenMalls(query, radius);
      if (response.status === 'OK') {
        setMalls(response.results || []);
      } else {
        setError(`API Error: ${response.status}`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
    } finally {
      setLoading(false);
    }
  }, []);

  const fetchAllCategories = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üîÑ Loading all categories from API...');
      
      const [
        restaurantsRes,
        attractionsRes,
        hotelsRes,
        universitiesRes,
        mallsRes
      ] = await Promise.all([
        searchKhonKaenRestaurants('‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 10000), // ‡πÄ‡∏û‡∏¥‡πà‡∏° radius
        searchKhonKaenAttractions('‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', 15000),
        searchKhonKaenHotels('‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', 10000),
        searchKhonKaenUniversities('‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢', 10000),
        searchKhonKaenMalls('‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', 10000)
      ]);

      console.log('üìä API Results:');
      console.log('- Restaurants:', restaurantsRes.results?.length || 0);
      console.log('- Attractions:', attractionsRes.results?.length || 0);
      console.log('- Hotels:', hotelsRes.results?.length || 0);
      console.log('- Universities:', universitiesRes.results?.length || 0);
      console.log('- Malls:', mallsRes.results?.length || 0);

      if (restaurantsRes.status === 'OK') setRestaurants(restaurantsRes.results || []);
      if (attractionsRes.status === 'OK') setAttractions(attractionsRes.results || []);
      if (hotelsRes.status === 'OK') setHotels(hotelsRes.results || []);
      if (universitiesRes.status === 'OK') setUniversities(universitiesRes.results || []);
      if (mallsRes.status === 'OK') setMalls(mallsRes.results || []);

    } catch (err) {
      console.error('‚ùå Error loading categories:', err);
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setLoading(false);
    }
  }, []);

  return {
    restaurants,
    attractions,
    hotels,
    universities,
    malls,
    loading,
    error,
    fetchRestaurants,
    fetchAttractions,
    fetchHotels,
    fetchUniversities,
    fetchMalls,
    fetchAllCategories,
    clearError: () => setError(null)
  };
};

// Hook for getting place photo URL
export const usePlacePhoto = () => {
  const getPhotoUrl = useCallback((photoReference: string, maxWidth: number = 400) => {
    return `https://maps.googleapis.com/maps/api/place/photo?maxwidth=${maxWidth}&photo_reference=${photoReference}&key=YOUR_GOOGLE_MAPS_API_KEY`;
  }, []);

  return { getPhotoUrl };
};

// Utility functions
export const getPlaceCoordinates = (place: Place): { lat: number; lng: number } | null => {
  // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: geometry.location.lat/lng
  if (place.geometry?.location?.lat && place.geometry?.location?.lng) {
    return {
      lat: place.geometry.location.lat,
      lng: place.geometry.location.lng
    };
  }
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô: geometry.lat/lng ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  if (place.geometry?.lat && place.geometry?.lng) {
    return {
      lat: place.geometry.lat,
      lng: place.geometry.lng
    };
  }
  
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô: lat/lng ‡πÉ‡∏ô root object
  if ((place as any).lat && (place as any).lng) {
    return {
      lat: (place as any).lat,
      lng: (place as any).lng
    };
  }
  
  console.warn('No coordinates found for place:', place.name, place);
  return null;
};

export const formatPlaceTypes = (types: string[]): string => {
  const typeMap: { [key: string]: string } = {
    restaurant: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
    tourist_attraction: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß',
    lodging: '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å',
    shopping_mall: '‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    university: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
    hospital: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
    gas_station: '‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô',
    bank: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
    atm: '‡∏ï‡∏π‡πâ ATM',
    pharmacy: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏¢‡∏≤',
    convenience_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ã‡∏∑‡πâ‡∏≠'
  };

  const mainType = types.find(type => typeMap[type]);
  return mainType ? typeMap[mainType] : '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà';
};

export const getPriceLevel = (priceLevel?: number): string => {
  if (!priceLevel) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤';
  
  const levels = ['‡∏ü‡∏£‡∏µ', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á', '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏á‡∏°‡∏≤‡∏Å'];
  return levels[priceLevel] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤';
};
